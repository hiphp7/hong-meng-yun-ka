<?php

namespace app\shop\controller;
use fast\Random;
use think\Config;
use think\Controller;
use think\Db;
use think\exception\HttpResponseException;
use think\Request;
use think\Response;
use think\Session;

class Base extends Controller {

    /**
     * 默认响应输出类型,支持json/xml
     * @var string
     */
    protected $responseType = 'json';

    protected $uid = null; //用户id

    protected $user = null; //用户信息

    protected $station_id = 0;  //子站id

    protected $site = []; //系统配置信息

    protected $domain = ""; //域名

    protected $equipment = "pc"; //客户端设备

    protected $template_path = ""; //模板路径

    protected $template_version = 0; //模板版本

    protected $avatar = "/uploads/20210106/634991592083b770187ab213c25d022a.jpg"; //默认头像

//    protected $template_name = "dujiao"; //模板名称
    protected $template_name = "default"; //模板名称


    public function _initialize() {

		parent::_initialize(); // TODO: Change the autogenerated stub

		$this->site = Config::get("site");

        $this->equipment = is_mobile() ? 'mobile' : 'pc';

        $template = db::name('template')->where([$this->equipment => 1])->find(); //查找模板信息
        if(!$template){
            $template = db::name('template')->where(['directory' => 'default'])->find();
        }
        $this->template_name = $template['directory'];
        $this->template_version = $template['version'];

        $this->domain = $_SERVER['REQUEST_SCHEME'] . '://' . $_SERVER['HTTP_HOST'] . '/';

		$this->uid = session::has("uid") ? session::get("uid") : null;

        $domain = $_SERVER['HTTP_HOST'];

        $station = Db::name('shop_station')->where(['domain' => $domain])->find();

        $this->station_id = $station ? $station['id'] : 0;

        $this->template_path = ROOT_PATH . 'public/content/template/' . $this->template_name . '/';

        include_once $this->template_path . "module.php";

		$this->assign([
            'site' => $this->site,
            'uid' => $this->uid,
            "template_version" => $this->template_version
        ]);


        // var_dump($this->uid);
        // var_dump($this->tourist);
        // die;
    }





    /**
     * 支付宝签名
    */
    public function getAlipaySign($data, $alipay) {
        ksort($data);
        $data_str = "";
        foreach ($data as $key => $val) {
            if($key != "sign"){
                $data_str .= $key . "=" . $val . "&";
            }

        }
        $data_str = rtrim($data_str, "&");
        $sign = "";
        $private_key = "-----BEGIN RSA PRIVATE KEY-----\n" . wordwrap($alipay['private_key'], 64, "\n", true) . "\n-----END RSA PRIVATE KEY-----";
        openssl_sign($data_str, $sign, $private_key, OPENSSL_ALGO_SHA256);
        $sign = base64_encode($sign);
        return $sign;
    }

    /**
     * 发起支付宝支付
    */
    public function submit_alipay_form($data) {
        $gateway_url = "https://openapi.alipay.com/gateway.do";
        // $gateway_url = "https://openapi.alipaydev.com/gateway.do";

        $sHtml = "<form id='alipaysubmit' name='alipaysubmit' action='" . $gateway_url . "' method='POST'>";
        foreach ($data as $key => $val) {
            $val = str_replace("'", "&apos;", $val);
            $sHtml .= "<input type='hidden' name='" . $key . "' value='" . $val . "'/>";
        }
        //submit按钮控件请不要含有name属性
        $sHtml = $sHtml . "<input type='submit' value='ok' style='display:none;''></form>";
        $sHtml = $sHtml . "<script>document.forms['alipaysubmit'].submit();</script>";
        echo $sHtml;
    }

    /**
     * 处理商品信息
    */
    public function handle_goods($goods){
        foreach($goods as $key => &$val){
            $images = explode(',', $val['images']);
            $val['cover'] = $images[0];
        }
        return $goods;
    }







    //生成订单号
    public function generateOrderNo(){
        $order_no = date('YmdHis', time()) . mt_rand(1000, 9999);
        return $order_no;
    }


    /**
     * 获取密码加密后的字符串
     * @param string $password 密码
     * @param string $salt 密码盐
     * @return string
     */
    public function getEncryptPassword($password, $salt = '') {
        return md5(md5($password) . $salt);
    }



    /**
     * 操作成功返回的数据
     * @param string $msg 提示信息
     * @param mixed $data 要返回的数据
     * @param int $code 错误码，默认为1
     * @param string $type 输出类型
     * @param array $header 发送的 Header 信息
     */
    protected function success($msg = '', $data = null, $code = 1, $type = null, array $header = []) {
        $this->result($msg, $data, $code, $type, $header);
    }

    /**
     * 操作失败返回的数据
     * @param string $msg 提示信息
     * @param mixed $data 要返回的数据
     * @param int $code 错误码，默认为0
     * @param string $type 输出类型
     * @param array $header 发送的 Header 信息
     */
/*    protected function error($msg = '', $data = null, $code = 0, $type = null, array $header = []) {
        $this->result($msg, $data, $code, $type, $header);
    }*/


    /**
     * 返回封装后的 API 数据到客户端
     * @access protected
     * @param mixed $msg 提示信息
     * @param mixed $data 要返回的数据
     * @param int $code 错误码，默认为0
     * @param string $type 输出类型，支持json/xml/jsonp
     * @param array $header 发送的 Header 信息
     * @return void
     * @throws HttpResponseException
     */
    protected function result($msg, $data = null, $code = 0, $type = null, array $header = []) {
        $result = [
            'code' => $code, 'msg' => $msg, 'time' => Request::instance()->server('REQUEST_TIME'), 'data' => $data,
        ];
        // 如果未设置类型则自动判断
        $type = $type ? $type : ($this->request->param(config('var_jsonp_handler')) ? 'jsonp' : $this->responseType);

        if (isset($header['statuscode'])) {
            $code = $header['statuscode'];
            unset($header['statuscode']);
        } else {
            //未设置状态码,根据code值判断
            $code = $code >= 1000 || $code < 200 ? 200 : $code;
        }
        $response = Response::create($result, $type, $code)->header($header);
        throw new HttpResponseException($response);
    }


    /**
     * 上传文件
     * @ApiMethod (POST)
     * @param File $file 文件流
     */
    public function upload(){

        $file = $this->request->file('file');
        if (empty($file)) {
            $this->error(__('No file upload or server upload limit exceeded'));
        }

        //判断是否已经存在附件
        $sha1 = $file->hash();

        $upload = Config::get('upload');

        preg_match('/(\d+)(\w+)/', $upload['maxsize'], $matches);
        $type = strtolower($matches[2]);
        $typeDict = ['b' => 0, 'k' => 1, 'kb' => 1, 'm' => 2, 'mb' => 2, 'gb' => 3, 'g' => 3];
        $size = (int)$upload['maxsize'] * pow(1024, isset($typeDict[$type]) ? $typeDict[$type] : 0);
        $fileInfo = $file->getInfo();
        $suffix = strtolower(pathinfo($fileInfo['name'], PATHINFO_EXTENSION));
        $suffix = $suffix && preg_match("/^[a-zA-Z0-9]+$/", $suffix) ? $suffix : 'file';

        $mimetypeArr = explode(',', strtolower($upload['mimetype']));
        $typeArr = explode('/', $fileInfo['type']);

        //禁止上传PHP和HTML文件
        if (in_array($fileInfo['type'], ['text/x-php', 'text/html']) || in_array($suffix, ['php', 'html', 'htm'])) {
            $this->error(__('Uploaded file format is limited'));
        }
        //验证文件后缀
        if ($upload['mimetype'] !== '*' &&
            (
                !in_array($suffix, $mimetypeArr)
                || (stripos($typeArr[0] . '/', $upload['mimetype']) !== false && (!in_array($fileInfo['type'], $mimetypeArr) && !in_array($typeArr[0] . '/*', $mimetypeArr)))
            )
        ) {
            $this->error(__('Uploaded file format is limited'));
        }
        //验证是否为图片文件
        $imagewidth = $imageheight = 0;
        if (in_array($fileInfo['type'], ['image/gif', 'image/jpg', 'image/jpeg', 'image/bmp', 'image/png', 'image/webp']) || in_array($suffix, ['gif', 'jpg', 'jpeg', 'bmp', 'png', 'webp'])) {
            $imgInfo = getimagesize($fileInfo['tmp_name']);
            if (!$imgInfo || !isset($imgInfo[0]) || !isset($imgInfo[1])) {
                $this->error(__('Uploaded file is not a valid image'));
            }
            $imagewidth = isset($imgInfo[0]) ? $imgInfo[0] : $imagewidth;
            $imageheight = isset($imgInfo[1]) ? $imgInfo[1] : $imageheight;
        }
        $replaceArr = [
            '{year}'     => date("Y"),
            '{mon}'      => date("m"),
            '{day}'      => date("d"),
            '{hour}'     => date("H"),
            '{min}'      => date("i"),
            '{sec}'      => date("s"),
            '{random}'   => Random::alnum(16),
            '{random32}' => Random::alnum(32),
            '{filename}' => $suffix ? substr($fileInfo['name'], 0, strripos($fileInfo['name'], '.')) : $fileInfo['name'],
            '{suffix}'   => $suffix,
            '{.suffix}'  => $suffix ? '.' . $suffix : '',
            '{filemd5}'  => md5_file($fileInfo['tmp_name']),
        ];
        $savekey = $upload['savekey'];
        $savekey = str_replace(array_keys($replaceArr), array_values($replaceArr), $savekey);

        $uploadDir = substr($savekey, 0, strripos($savekey, '/') + 1);
        $fileName = substr($savekey, strripos($savekey, '/') + 1);
        //
        $splInfo = $file->validate(['size' => $size])->move(ROOT_PATH . '/public' . $uploadDir, $fileName);
        if ($splInfo) {
            $params = array(
                'admin_id'    => 0,
                'user_id'     => (int)$this->uid,
                'filesize'    => $fileInfo['size'],
                'imagewidth'  => $imagewidth,
                'imageheight' => $imageheight,
                'imagetype'   => $suffix,
                'imageframes' => 0,
                'mimetype'    => $fileInfo['type'],
                'url'         => $uploadDir . $splInfo->getSaveName(),
                'uploadtime'  => time(),
                'storage'     => 'local',
                'sha1'        => $sha1,
            );
            $attachment = model("attachment");
            $attachment->data(array_filter($params));
            $attachment->save();
            \think\Hook::listen("upload_after", $attachment);
            return ['url' => $uploadDir . $splInfo->getSaveName(), 'code' => 1];
        } else {
            // 上传失败获取错误信息
            return ['msg' => $file->getError(), 'code' => 0];
        }
    }

}
